#!/bin/bash
#
# Copyright (C) 2023 Florian Domain
#
# This file is part of ocserv.
#
# ocserv is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# ocserv is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GnuTLS; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# This test validates occtl output.

OCCTL="${OCCTL:-../src/occtl/occtl}"
SERV="${SERV:-../src/ocserv}"
srcdir=${srcdir:-.}
PIDFILE=ocserv-pid.$$.tmp
CPIDFILE=oc-pid.$$.tmp
PATH=${PATH}:/usr/sbin
OUTFILE=occtl.$$.tmp

OCCTL_SOCKET=./occtl-comp-$$.socket
USERNAME=test

. `dirname $0`/random-net.sh
. `dirname $0`/common.sh
. `dirname $0`/ns.sh

eval "${GETPORT}"

if test "$(id -u)" != "0";then
	echo "This test must be run as root"
	exit 77
fi

function finish {
  set +e
  echo " * Cleaning up..."
  test -n "${PID}" && kill ${PID} >/dev/null 2>&1
  test -n "${PIDFILE}" && rm -f ${PIDFILE} >/dev/null 2>&1
  test -n "${CPIDFILE}" && rm -f ${CPIDFILE} >/dev/null 2>&1
  test -n "${CONFIG}" && rm -f ${CONFIG} >/dev/null 2>&1
  test -n "${OUTFILE}" && rm -f ${OUTFILE} >/dev/null 2>&1
}
trap finish EXIT

echo "Testing occtl output... "

update_config test-occtl.config
echo " * Starting ocserv..."
${CMDNS2} ${SERV} -p ${PIDFILE} -f -c ${CONFIG} -d 3 >/dev/null 2>&1 & PID=$!

sleep 5

echo " * Connecting to obtain cookie... "
eval `echo "test" | ${CMDNS1} ${OPENCONNECT} --passwd-on-stdin -q ${ADDRESS}:${PORT} -u test --authenticate --servercert=pin-sha256:xp3scfzy3rOQsv9NcOve/8YVVv+pHr4qNCXEXrNl5s8=`

if [ -z "$COOKIE" ];then
	fail $PID "Could not obtain cookie"
fi

echo " * Connecting with cookie... "
${CMDNS1} ${OPENCONNECT} ${ADDRESS}:${PORT} -u test -C "$COOKIE" --servercert=pin-sha256:xp3scfzy3rOQsv9NcOve/8YVVv+pHr4qNCXEXrNl5s8= --background --pid-file "${CPIDFILE}" >/dev/null 2>&1

sleep 4

if [ ! -f "${CPIDFILE}" ];then
	fail $PID "It was not possible to establish session!"
fi


echo " * Testing JSON output of 'show users' command:" 
${CMDNS2} ${OCCTL} -s ${OCCTL_SOCKET} --json -n show users > ${OUTFILE}
if test $? != 0;then
	fail $PID "Failed to call occtl"
fi

# List of fields to be tested against occtl output
FIELDS="\"ID\" \"raw_connected_at\""

for FIELD in $FIELDS; do
	echo " ** checking ${FIELD} is present..."
	grep ${FIELD} ${OUTFILE}
	if test $? != 0;then
		echo "occtl show users doesn't contain ${FIELD}"
		exit 1
	fi
done

exit 0
